// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum ClientType {
  INDIVIDUAL
  COMPANY
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
  FAILED
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
}

enum OrderWorkerStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
  REASSIGNED
  DECLINED
}

enum ToolStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  LOST
  RETIRED
}

enum EvidenceType {
  PHOTO
  VIDEO
}

enum AvailabilityType {
  FULL_TIME
  PART_TIME
  ON_CALL
}

enum NotificationType {
  PENDING_TASK
  SYSTEM_ALERT
  PROFILE_UPDATE
  NEW_MESSAGE
  ASSIGNMENT_UPDATE
  VISIT_REMINDER
  ACCOUNT_STATUS_CHANGE
  FEEDBACK_REQUEST
}

model User {
  dni         String     @id
  firstName   String
  lastName    String
  username    String     @unique
  email       String     @unique
  phone       String?
  address     String?
  password    String
  gender      Gender
  avatar      String?
  country     String?
  socialLinks Json?
  birthDate   DateTime?
  status      UserStatus @default(ACTIVE)
  roleId      Int
  role        Role       @relation("UsersWithRole", fields: [roleId], references: [id])
  isVerified  Boolean    @default(false)
  lastLogin   DateTime?
  deletedAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relaciones
  managedOrders Order[]        @relation("ManagedByUser")
  orderWorkers  OrderWorker[]
  availability  Availability[]
  notifications Notification[]
  conformities  Conformity[]
  visits        Visit[]

  // MÃ©tricas
  completedOrders     Int    @default(0)
  totalWorkingTime    Int    @default(0)
  averageSatisfaction Float?

  @@index([roleId])
  @@index([deletedAt])
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    String
  user      User             @relation(fields: [userId], references: [dni])
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  readAt    DateTime?

  @@index([userId])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  users       User[]       @relation("UsersWithRole")
  permissions Permission[] @relation("PermissionsOfRole")
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String @unique
  roles Role[] @relation("PermissionsOfRole")
}

model Client {
  id                 String     @id
  name               String
  email              String     @unique
  password           String?
  phone              String?
  address            String?
  type               ClientType
  contactPersonName  String?
  contactPersonPhone String?
  notes              String?
  isActive           Boolean    @default(true)
  deletedAt          DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  orders Order[]
  visits Visit[]
}

model Order {
  id                    Int         @id @default(autoincrement())
  description           String
  scheduledDate         DateTime?
  endDate               DateTime?
  alternateContactName  String?
  alternateContactPhone String?
  status                OrderStatus
  statusDetails         String?
  clientId              String
  client                Client      @relation(fields: [clientId], references: [id])
  conformity            Conformity?
  createdBy             String
  updatedBy             String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  workers         OrderWorker[]
  visits          Visit[]
  services        Service[]
  locations       Location[]
  toolAssignments ToolAssignment[]

  managedBy User? @relation("ManagedByUser", fields: [createdBy], references: [dni])

  @@index([createdBy])
}

model OrderWorker {
  orderId       Int
  order         Order             @relation(fields: [orderId], references: [id])
  userId        String
  user          User              @relation(fields: [userId], references: [dni])
  status        OrderWorkerStatus
  isResponsible Boolean           @default(false)

  @@id([orderId, userId])
}

model Tool {
  id          String     @id @default(cuid())
  name        String
  description String?
  serial      String?    @unique
  status      ToolStatus @default(AVAILABLE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  assignments ToolAssignment[]
}

model ToolAssignment {
  id         String    @id @default(cuid())
  tool       Tool      @relation(fields: [toolId], references: [id])
  toolId     String
  order      Order     @relation(fields: [orderId], references: [id])
  orderId    Int
  usedAt     DateTime  @default(now())
  returnedAt DateTime?
}

model Location {
  id        Int     @id @default(autoincrement())
  latitude  Float
  longitude Float
  label     String?
  order     Order?  @relation(fields: [orderId], references: [id])
  orderId   Int?
}

model Visit {
  id          Int        @id @default(autoincrement())
  date        DateTime
  endTime     DateTime
  description String
  orderId     Int
  order       Order      @relation(fields: [orderId], references: [id])
  userId      String
  user        User       @relation(fields: [userId], references: [dni])
  clientId    String
  client      Client     @relation(fields: [clientId], references: [id])
  isReviewed  Boolean    @default(false)
  evaluation  Float?
  evidences   Evidence[]
  createdBy   String
  updatedBy   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
}

model Evidence {
  id        Int          @id @default(autoincrement())
  visitId   Int
  visit     Visit        @relation(fields: [visitId], references: [id])
  type      EvidenceType
  url       String
  comment   String?
  createdAt DateTime     @default(now())

  @@index([visitId])
}

model Service {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  estimatedTime Int?
  status        ServiceStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orders        Order[]
}

model Availability {
  id        Int              @id @default(autoincrement())
  userId    String
  user      User             @relation(fields: [userId], references: [dni])
  startDate DateTime
  endDate   DateTime
  type      AvailabilityType

  @@index([userId])
}

model Conformity {
  id              Int       @id @default(autoincrement())
  orderId         Int       @unique
  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  userId          String
  user            User      @relation(fields: [userId], references: [dni])
  description     String
  accepted        Boolean   @default(true)
  rejectionReason String?
  signature       String?
  files           Json?
  rating          Float?
  feedback        String?
  conformityDate  DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}
