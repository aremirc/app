// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Cambiar a otro proveedor si es necesario
  url      = env("DATABASE_URL")
}

model User {
  dni       String   @id // DNI como identificador único
  username  String   @unique
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  roleId    Int // Suponiendo que tienes un campo `roleId` que hace referencia al rol del usuario
  role      Role     @relation("UsersWithRole", fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con órdenes donde participa como gestor
  managedOrders Order[] @relation("ManagedByUser")

  // Relación con órdenes como técnico (many-to-many)
  orderWorkers OrderWorker[]

  // Relación con visitas realizadas (como técnico)
  visits Visit[]

  // Disponibilidad, si es técnico
  availability Availability[]

  // Métricas de desempeño (si es técnico)
  completedOrders     Int    @default(0) // Número de órdenes completadas
  totalWorkingTime    Int    @default(0) // Tiempo total trabajado en minutos
  averageSatisfaction Float? // Promedio de satisfacción del cliente

  conformities Conformity[]

  @@index([roleId]) // El índice hace referencia al campo escalar `roleId` en lugar del campo de relación `role`
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]       @relation("UsersWithRole")
  permissions Permission[] @relation("PermissionsOfRole")
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String @unique // Nombre del permiso (ej: "create_user", "delete_order", "assign_worker")
  roles Role[] @relation("PermissionsOfRole")
}

model Client {
  dni       String   @id // DNI como identificador único
  name      String
  email     String   @unique
  phone     String?
  address   String?
  orders    Order[] // Relación con órdenes de servicio
  visits    Visit[] // Relación con visitas realizadas
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            Int         @id @default(autoincrement())
  description   String
  status        OrderStatus
  statusDetails String? // Detalles adicionales sobre el estado de la orden
  clientId      String
  client        Client      @relation(fields: [clientId], references: [dni])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Técnico(s) asignado(s)
  workers OrderWorker[]

  // Visitas relacionadas
  visits   Visit[]
  services Service[]

  // Usuario gestor
  userId    String? // Asegúrate de que este campo haga referencia a un Usuario
  managedBy User?   @relation("ManagedByUser", fields: [userId], references: [dni]) // Relación con el usuario que gestionó la orden

  // Conformidades
  conformities Conformity[] // Relación con las conformidades de la orden
}

model OrderWorker {
  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [dni])

  status OrderWorkerStatus // Estado del servicio: (por ejemplo, assigned, in_progress, completed)

  @@id([orderId, userId]) // Llave primaria compuesta para evitar duplicados
}

model Visit {
  id          Int      @id @default(autoincrement())
  date        DateTime // Fecha y hora de inicio de la visita
  endTime     DateTime // Fin de la visita
  description String // Descripción de la visita (trabajo realizado, incidentes, etc.)
  orderId     Int
  order       Order    @relation(fields: [orderId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [dni])
  clientId    String
  client      Client   @relation(fields: [clientId], references: [dni])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  evaluation  Float? // Evaluación de la visita (por ejemplo, puntuación de satisfacción del cliente)
}

model Service {
  id          Int           @id @default(autoincrement())
  name        String // Nombre del servicio (ej. "Instalación eléctrica", "Mantenimiento HVAC")
  description String? // Descripción detallada del servicio
  price       Float // Precio del servicio
  status      ServiceStatus // Estado del servicio: 'active' o 'inactive'
  createdAt   DateTime      @default(now()) // Fecha de creación
  updatedAt   DateTime      @updatedAt // Fecha de última actualización
  orders      Order[] // Relación con órdenes en las que se ha utilizado este servicio
}

model Availability {
  id        Int      @id @default(autoincrement())
  userId    String // DNI del usuario al que pertenece la disponibilidad
  user      User     @relation(fields: [userId], references: [dni])
  startDate DateTime // Fecha de inicio de la disponibilidad
  endDate   DateTime // Fecha de fin de la disponibilidad
  type      String // Tipo de disponibilidad (por ejemplo: "full-time", "part-time")
}

model Conformity {
  id          Int      @id @default(autoincrement())
  orderId     Int
  order       Order    @relation(fields: [orderId], references: [id])
  description String // Descripción de la conformidad
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [dni])
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED // Estado adicional si deseas rastrear fallos en la ejecución de las órdenes
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
}

enum OrderWorkerStatus {
  ASSIGNED // El trabajador fue asignado pero aún no comenzó
  IN_PROGRESS // El trabajo está en curso
  COMPLETED // El trabajo fue completado
  FAILED // El trabajo falló o no se pudo completar
  CANCELLED // El trabajo fue cancelado antes de iniciarse
  REASSIGNED // El trabajador fue reemplazado por otro
  DECLINED // El trabajador rechazó la asignación
}
